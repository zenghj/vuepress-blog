(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{424:function(t,e,a){t.exports=a.p+"assets/img/git-merge.f75ca6ac.png"},425:function(t,e,a){t.exports=a.p+"assets/img/git-rebase.f709a483.png"},486:function(t,e,a){"use strict";a.r(e);var s=a(9),r=Object(s.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"git-stash"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-stash"}},[t._v("#")]),t._v(" git stash")]),t._v(" "),s("p",[t._v("当你本地有一些未提交的修改时需要进行一些其他操作，但是又不想把这部分半成品的工作提交，这时使用"),s("code",[t._v("git stash")]),t._v("将这个状态缓存起来，然后操作完其他事情之后，回到当前分支，然后执行"),s("code",[t._v("git stash pop")]),t._v("把前面缓存的状态取出来。")]),t._v(" "),s("h2",{attrs:{id:"git-remote"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-remote"}},[t._v("#")]),t._v(" git remote")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("git remote -v")]),t._v(" 例举当前存在的远程仓库")]),t._v(" "),s("li",[s("code",[t._v("git remote set-url origin $GIT_REPO_URL")]),t._v(" 修改仓库对应的远程服务器地址, $GIT_REPO_URL可以是形如"),s("code",[t._v("https://github.com/USERNAME/REPOSITORY.git")]),t._v(" 或 "),s("code",[t._v("git@github.com:USERNAME/REPOSITORY.git")]),t._v("的URL")])]),t._v(" "),s("h2",{attrs:{id:"git-rebase"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-rebase"}},[t._v("#")]),t._v(" git rebase")]),t._v(" "),s("p",[t._v("git rebase相比git merge会让提交记录更加扁平。")]),t._v(" "),s("p",[s("img",{attrs:{src:a(424),alt:""}})]),t._v(" "),s("div",{staticStyle:{"text-align":"center"}},[t._v("git merge")]),t._v(" "),s("p",[s("img",{attrs:{src:a(425),alt:""}})]),t._v(" "),s("div",{staticStyle:{"text-align":"center"}},[t._v("git rebase ")]),t._v(" "),s("h3",{attrs:{id:"参考"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"http://gitbook.liuhui998.com/4_2.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("git rebase"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://www.freecodecamp.org/news/an-introduction-to-git-merge-and-rebase-what-they-are-and-how-to-use-them-131b863785f/",target:"_blank",rel:"noopener noreferrer"}},[t._v("An introduction to Git merge and rebase: what they are, and how to use them"),s("OutboundLink")],1)])]),t._v(" "),s("h2",{attrs:{id:"git-submoudule"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-submoudule"}},[t._v("#")]),t._v(" git submoudule")]),t._v(" "),s("h3",{attrs:{id:"使用场景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用场景"}},[t._v("#")]),t._v(" 使用场景")]),t._v(" "),s("p",[t._v("复用某部分子模块功能，等同于npm包功能，但是是通过git进行的模块管理")]),t._v(" "),s("h3",{attrs:{id:"使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用"}},[t._v("#")]),t._v(" 使用")]),t._v(" "),s("h4",{attrs:{id:"添加一个子模块"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#添加一个子模块"}},[t._v("#")]),t._v(" 添加一个子模块")]),t._v(" "),s("p",[t._v("在仓库的根目录执行下面的命令")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" submodule "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("url"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" path\n")])])]),s("p",[t._v("比如"),s("code",[t._v("git submodule add git@github.com:zenghj/test.git notes/git/demo/test-submodule")])]),t._v(" "),s("p",[t._v("添加完就会clone test仓库到本地，直接修改submodule仓库的文件是不会被上层git仓库跟踪到的，但是子git仓库还是可以跟踪和提交")]),t._v(" "),s("h4",{attrs:{id:"克隆一个带子模块的项目"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#克隆一个带子模块的项目"}},[t._v("#")]),t._v(" 克隆一个带子模块的项目")]),t._v(" "),s("p",[t._v("克隆上层仓库，子模块仅仅被拉取了一个文件夹，里面没有任何内容。")]),t._v(" "),s("p",[t._v("接下来要执行两个命令：")]),t._v(" "),s("ol",[s("li",[t._v("初始化本地配置文件")])]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" submodule init\n")])])]),s("p",[t._v("2.拉取子目录所有数据，并检出上层仓库里所列的提交。")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" submodule update\n")])])]),s("p",[t._v("之后每次需要更新子模块仓库时都需运行 "),s("code",[t._v("git submodules update")]),t._v("。子模块并不会随上层目录的更新而一起更新。")]),t._v(" "),s("h4",{attrs:{id:"需要注意的问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#需要注意的问题"}},[t._v("#")]),t._v(" 需要注意的问题")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("上层仓库只保持对子模块的一个记录，而不会跟踪内部文件。\n上层仓库（后简称 A 仓库）只会保留子模块（后简称 B 仓库）的一个提交记录（即 HEAD 指针值）。所以当在 A 仓库拉取更新时，B 仓库的内容并不会得到更新，而是只是更新了 B 仓库的 HEAD。当执行 git submodule update 命令时，B 仓库才会从远程仓库拉取所有数据，并根据 A 仓库中对 B 仓库的 HEAD 记录检出需要的文件内容。")])]),t._v(" "),s("li",[s("p",[t._v("模块拉取失败的原因\n有上文可知，A 仓库仅仅记录一个 HEAD 值。所以当一个开发者在本地的 B 仓库里做了代码的修改，并提交，但未推送到远程仓库。他随后在 A 仓库中进行了提交和推送，此时 A 仓库会记录 B 仓库在该开发者本地的一个 HEAD。当其他开发者尝试通过 git submodule update 更新 B 仓库时，会发生错误，因为此时 B 仓库的 HEAD 所指向的提交只存在于第一个开发者的本地。")])])]),t._v(" "),s("p",[t._v("此时，你只能查看是谁提交了本次更改，然后联系他，教育他一下。")]),t._v(" "),s("ol",{attrs:{start:"3"}},[s("li",[t._v("子模块里工作要格外小心")])]),t._v(" "),s("p",[t._v("因为在上层仓库里进行 git submodule update 时会将子模块检出至一个游离的 HEAD，这可能导致你在子目录里提交但未在上层仓库提交的工作丢失。这种情况仍可以使用 git reflog 命令去查找出那个游离的 HEAD。但仍要避免这种失误出现。")]),t._v(" "),s("p",[t._v("（考虑不要直接在子模块修改内容吧）")]),t._v(" "),s("h3",{attrs:{id:"参考-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考-2"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/61710235",target:"_blank",rel:"noopener noreferrer"}},[t._v("git submodule使用场景"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://www.hozen.site/archives/23/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Git 子模块 submodule 的使用"),s("OutboundLink")],1)])])])}),[],!1,null,null,null);e.default=r.exports}}]);